on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
    - main
    - master
    - Test
    - release/*
    paths:
    - .github/workflows/test.yml
  schedule:
  # random HH:MM to avoid a load spike on GitHub Actions at 00:00
  - cron: 51 23 * * *
name: Semgrep
jobs:
  semgrep:
    name: semgrep/ci
    runs-on: ubuntu-20.04
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    steps:
    - uses: actions/checkout@v4
    - run: semgrep ci

  Checkout:
   # needs: semgrep 
    name: Checkout
    runs-on: ubuntu-20.04
    steps:
     - uses: actions/checkout@v4.2.2
  #
  CodeQL:
      needs: Checkov
      name: Analyze (${{ matrix.language }})
      runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
      permissions:
        security-events: write
        packages: read  
      strategy:
        fail-fast: false
        matrix:
          include:
            - language: javascript-typescript
              build-mode: none
            - language: python
              build-mode: none
      steps:
                - name: Checkout repository
                  uses: actions/checkout@v4
               # Initializes the CodeQL tools for scanning.
                - name: Initialize CodeQL
                  uses: github/codeql-action/init@v3  
                  with:
                    languages: ${{ matrix.language }}
                    build-mode: ${{ matrix.build-mode }}
                - if: matrix.build-mode == 'manual'
                  shell: bash
                  run: |
                        echo 'If you are using a "manual" build mode for one or more of the' \
                          'languages you are analyzing, replace this with the commands to build' \
                          'your code, for example:'
                        echo '  make bootstrap'
                        echo '  make release'
                        exit 1
                - name: Perform CodeQL Analysis
                  uses: github/codeql-action/analyze@v3
                  with:
                    category: "/language:${{matrix.language}}"        

 
       
# Статический анализ безопасности с помощью Checkov GitHub Action
  Checkov:
      needs: Checkout
      runs-on: ubuntu-latest
      steps:
       - uses: actions/checkout@v4
       - name: Set up Python 3.8
         uses: actions/setup-python@v4
         with:
           python-version: 3.8
       - name: Test with Checkov
         id: checkov
         uses: bridgecrewio/checkov-action@master
         with:
          directory: example/examplea
          framework: terraform 

 #ZAP Advanced
  zap_scan:
      needs: Checkout
      runs-on: ubuntu-latest
      name: Scan the webapplication
      steps:
        - name: Checkout
          uses: 
            actions/checkout@v4          
          with:
            ref: master
            #run: docker network create zapnet 
            #network: '--net zapnet'
        - name: Create Docker network
          run: docker network create zapnet
          
        - name: Pull ZAP Docker Image
          run: docker pull ghcr.io/zaproxy/zaproxy:stable
        - name: ZAP Scan
          uses: zaproxy/action-full-scan@v0.12.0
          #uses: zap-full-scan.py -t <http://0.0.0.0:8080> [-a, -d]
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
            target: 'http://host.docker.internal:8080'
            #rules_file_name: '.zap/rules.tsv'
            cmd_options:  '-a'
            #run: docker network create zapnet --net zapnet
            #network: 'zapnet'

  #
  Gitleaks:
      needs: Checkout
      name: gitleaks
      runs-on: ubuntu-latest
      steps:
          - uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - uses: gitleaks/gitleaks-action@v2
            id: gitleaks
            env:
              #GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
              #GITLEAKS_ENABLE_COMMENTS: false
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            continue-on-error: true
   #опционально     
  Linter:  
     name: Lint
     runs-on: ubuntu-latest

     permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

     steps:
          - uses: actions/checkout@v4
            with:
            # super-linter needs the full git history to get the
            # list of files that changed across commits
              fetch-depth: 0
  
            name: Super-linter
          - uses: super-linter/super-linter@v7.2.1 # x-release-please-version
            env:
                VALIDATE_ALL_CODEBASE: false
                DEFAULT_BRANCH: "master"
                # To report GitHub Actions status checks
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            continue-on-error: true  # убрать после ручной настройки, если нужны тригеры от Super-linter          
    
  Deploy_test:
      needs: [Gitleaks, semgrep, CodeQL, zap_scan]
      #needs: [semgrep, CodeQL, zap_scan]
      name: Deploy Test    
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      runs-on: ubuntu-latest
      environment: test
      steps:
        - name: Deploy Test
          run: echo "Deploy Test"

  Deploy_release:
      needs: Deploy_test
      name: Deploy release
      runs-on: ubuntu-latest
      timeout-minutes: 60
      environment: release
      steps: 
         - name: Deploy release
           run: echo "Deploy release"
      
            
              

                
                    
 
