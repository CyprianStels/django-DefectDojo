on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
    - main
    - master
    - release/*
    paths:
    - .github/workflows/test.yml
  schedule:
  # random HH:MM to avoid a load spike on GitHub Actions at 00:00
  - cron: 51 23 * * *
name: Semgrep
jobs:
  semgrep:
    name: semgrep/ci
    runs-on: ubuntu-20.04
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    steps:
    - uses: actions/checkout@v4
    - run: semgrep ci

  Checkout:
    needs: semgrep 
    name: Checkout
    runs-on: ubuntu-20.04
    steps:
     - uses: actions/checkout@v4.2.2
  #
  CodeQL:
      needs: Checkov
      name: Analyze (${{ matrix.language }})
      runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
      permissions:
        security-events: write
        packages: read  
      strategy:
        fail-fast: false
        matrix:
          include:
            - language: javascript-typescript
              build-mode: none
            - language: python
              build-mode: none
      steps:
                - name: Checkout repository
                  uses: actions/checkout@v4
               # Initializes the CodeQL tools for scanning.
                - name: Initialize CodeQL
                  uses: github/codeql-action/init@v3  
                  with:
                    languages: ${{ matrix.language }}
                    build-mode: ${{ matrix.build-mode }}
                - if: matrix.build-mode == 'manual'
                  shell: bash
                  run: |
                        echo 'If you are using a "manual" build mode for one or more of the' \
                          'languages you are analyzing, replace this with the commands to build' \
                          'your code, for example:'
                        echo '  make bootstrap'
                        echo '  make release'
                        exit 1
                - name: Perform CodeQL Analysis
                  uses: github/codeql-action/analyze@v3
                  with:
                    category: "/language:${{matrix.language}}"        
  #
  Python-package:
      needs: CodeQL
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
        matrix:
           python-version: ["3.9", "3.10", "3.11"]

      steps:
        - uses: actions/checkout@v4
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v3
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            python -m pip install flake8 pytest
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        - name: Lint with flake8
          run: |
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        - name: Test with pytest
          run: |
            pytest
#
  Python-test:
  #  needs: Python-package
    needs: CodeQL
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test
# Запуск тестов Django      
  
  Testing:
   #   needs: Python-test
      needs: CodeQL
      runs-on: ubuntu-latest

      steps:
       - name: Checkout Repo
         uses: actions/checkout@v2

       - name: Run pytest (pytest-django)
         env:
           PYTHONPATH: webapp/src/
         uses: samwlms/pytest-django-action@1.9
         with:
            args: pytest --ds=webapp.settings_prod -o python_files=tests.py -o django_find_project=false
       
# Статический анализ безопасности с помощью Checkov GitHub Action
  Checkov:
      needs: Checkout
      runs-on: ubuntu-latest
      steps:
       - uses: actions/checkout@v4
       - name: Set up Python 3.8
         uses: actions/setup-python@v4
         with:
           python-version: 3.8
       - name: Test with Checkov
         id: checkov
         uses: bridgecrewio/checkov-action@master
         with:
          directory: example/examplea
          framework: terraform 

 #ZAP Advanced
  zap_scan:
      runs-on: ubuntu-latest
      name: Scan the webapplication
      steps:
        - name: Checkout
          uses: 
            actions/checkout@v4          
          with:
            ref: master
            #run: docker network create zapnet 
            #network: '--net zapnet'
        - name: Create Docker network
          run: docker network create zapnet
          
        - name: Pull ZAP Docker Image
          run: docker pull ghcr.io/zaproxy/zaproxy:stable
        - name: ZAP Scan
          uses: zaproxy/action-full-scan@v0.12.0
          #uses: zap-full-scan.py -t <http://0.0.0.0:8080> [-a, -d]
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
            target: 'http://host.docker.internal:8080'
            #rules_file_name: '.zap/rules.tsv'
            cmd_options:  '-a'
            #run: docker network create zapnet --net zapnet
            network: 'zapnet'
            
                    
 

